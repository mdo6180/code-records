git add <path>: add path to staging
git commit -m "<message>": create a commit with a message
git commit -am "<message>": adds all files to staging area and create commit with a message (note: new files will still need to be added to staging area with git add)

git checkout -b <branch name>: create a new branch
git checkout <commit hash>: revert back to a commit

git log: display a log of all the git commits
git log --graph --pretty=oneline --abbrev-commit: display git tree
git log --graph --oneline --all: display git tree

location of global .gitconfig file: ~/.gitconfig
location of local .gitconfig file: path/to/project/.git/config




typical workflows:

checking out a previous commit in the same branch:
$ git log (list all commits and find the right commit hash)
$ git checkout <commit hash> (revert back to the desired commit)
$ git checkout <branch name> (move head back to the most recent commit in the branch)

stashing changes:
$ git stash list (list all stash entries)
$ git stash (discard local changes and push changes onto stash list)
$ git stash pop (pop changes of the stash list apply changes back into working area. Note: git stash apply does not remove stash entry from stash list.)
$ git stash drop stash@{3} (delete an entry from the stash list)

tagging a commit:
$ git tag -n (list tags)
$ git tag -a v1.4 -m "my version 1.4" (create a tag with a message)

fetching a remote branch (i.e., when someone else creates a remote branch and you have to pull the branch to your local repo)
$ git fetch <remote> <remote_branch>:<local_branch>
$ git checkout <local_branch>
Note: the fetch command would look something like this:
$ git fetch https://github.com/anacostiaAI/anacostia-pipeline.git feature/web_backend:feature/web_backend
$ git checkout feature/web_backend
Note: local branch does not have to have the same name as remote branch but best to keep the branches named the same

miscellaneous workflows:

setting up git tree alias:
add in the following lines into ~/.gitconfig file:
[alias]
    tree = log --graph --decorate --pretty=oneline --abbrev-commit

checkout a file from a commit:
$ git checkout <commit hash> -- <path to file>